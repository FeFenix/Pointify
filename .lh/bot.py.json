{
    "sourceFile": "bot.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 5,
            "patches": [
                {
                    "date": 1740776986871,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1740779407419,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -60,9 +60,9 @@\n                 handlers.ADDING_USER: [\r\n                     MessageHandler(filters.TEXT & ~filters.COMMAND, handlers.add_user)\r\n                 ]\r\n             },\r\n-            fallbacks=[CommandHandler(\"cancel\", handlers.cancel)],\r\n+            fallbacks=[CallbackQueryHandler(handlers.cancel)],\r\n             per_chat=True,\r\n             per_message=False,  # Set per_message to False\r\n             name=\"admin_conversation\"\r\n         )\r\n@@ -101,5 +101,5 @@\n         logger.error(f\"Critical error: {repr(e)}\")\r\n         sys.exit(1)\r\n \r\n if __name__ == '__main__':\r\n-    main()\r\n+    main()\n\\ No newline at end of file\n"
                },
                {
                    "date": 1740779496280,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -60,9 +60,9 @@\n                 handlers.ADDING_USER: [\r\n                     MessageHandler(filters.TEXT & ~filters.COMMAND, handlers.add_user)\r\n                 ]\r\n             },\r\n-            fallbacks=[CallbackQueryHandler(handlers.cancel)],\r\n+            fallbacks=[CommandHandler(\"cancel\", handlers.cancel)],\r\n             per_chat=True,\r\n             per_message=False,  # Set per_message to False\r\n             name=\"admin_conversation\"\r\n         )\r\n@@ -101,5 +101,5 @@\n         logger.error(f\"Critical error: {repr(e)}\")\r\n         sys.exit(1)\r\n \r\n if __name__ == '__main__':\r\n-    main()\n\\ No newline at end of file\n+    main()\r\n"
                },
                {
                    "date": 1740779938461,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -72,9 +72,8 @@\n         application.add_handler(CommandHandler(\"help\", handlers.help_command))\r\n         application.add_handler(CommandHandler(\"top\", handlers.show_top))\r\n         application.add_handler(CommandHandler(\"ac\", handlers.clear_all_points))\r\n         application.add_handler(CommandHandler(\"cancel\", handlers.cancel))\r\n-        application.add_handler(CommandHandler(\"adduser\", handlers.add_user_command))\r\n \r\n         # Add message handler to track users (outside of conversation)\r\n         application.add_handler(MessageHandler(\r\n             filters.TEXT & ~filters.COMMAND,\r\n"
                },
                {
                    "date": 1740780296871,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -55,11 +55,8 @@\n                     CallbackQueryHandler(handlers.user_callback)\r\n                 ],\r\n                 handlers.CHOOSING_POINTS: [\r\n                     CallbackQueryHandler(handlers.points_callback)\r\n-                ],\r\n-                handlers.ADDING_USER: [\r\n-                    MessageHandler(filters.TEXT & ~filters.COMMAND, handlers.add_user)\r\n                 ]\r\n             },\r\n             fallbacks=[CommandHandler(\"cancel\", handlers.cancel)],\r\n             per_chat=True,\r\n"
                },
                {
                    "date": 1740781136321,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -98,4 +98,5 @@\n         sys.exit(1)\r\n \r\n if __name__ == '__main__':\r\n     main()\r\n+    #asdasdasdaw\r\n"
                }
            ],
            "date": 1740776986871,
            "name": "Commit-0",
            "content": "import logging\r\nimport signal\r\nimport sys\r\nfrom telegram.ext import (\r\n    Application, \r\n    CommandHandler, \r\n    CallbackQueryHandler,\r\n    ConversationHandler,\r\n    MessageHandler,\r\n    filters\r\n)\r\nimport config\r\nimport handlers\r\n\r\n# Configure logging\r\nlogging.basicConfig(\r\n    format='%(asctime)s - %(name)s - %(levellevel)s - %(message)s',\r\n    level=logging.INFO\r\n)\r\nlogger = logging.getLogger(__name__)\r\n\r\ndef signal_handler(signum, frame):\r\n    \"\"\"Handle shutdown signals gracefully\"\"\"\r\n    logger.info(\"Received shutdown signal. Cleaning up...\")\r\n    sys.exit(0)\r\n\r\nasync def error_handler(update, context):\r\n    \"\"\"Log errors caused by Updates.\"\"\"\r\n    logger.error(f\"Update {update} caused error {repr(context.error)}\")\r\n    if \"Conflict\" in str(context.error):\r\n        logger.error(\"Bot instance conflict detected. Please ensure only one instance is running.\")\r\n        sys.exit(1)\r\n\r\ndef main():\r\n    \"\"\"Start the bot\"\"\"\r\n    # Set up signal handlers\r\n    signal.signal(signal.SIGINT, signal_handler)\r\n    signal.signal(signal.SIGTERM, signal_handler)\r\n\r\n    try:\r\n        # Create the Application and pass it your bot's token\r\n        application = Application.builder().token(config.BOT_TOKEN).build()\r\n\r\n        # Register error handler\r\n        application.add_error_handler(error_handler)\r\n\r\n        # Add conversation handler for admin commands\r\n        admin_conv_handler = ConversationHandler(\r\n            entry_points=[CommandHandler(\"a\", handlers.admin_command)],\r\n            states={\r\n                handlers.CHOOSING_ACTION: [\r\n                    CallbackQueryHandler(handlers.button_callback)\r\n                ],\r\n                handlers.CHOOSING_USER: [\r\n                    CallbackQueryHandler(handlers.user_callback)\r\n                ],\r\n                handlers.CHOOSING_POINTS: [\r\n                    CallbackQueryHandler(handlers.points_callback)\r\n                ],\r\n                handlers.ADDING_USER: [\r\n                    MessageHandler(filters.TEXT & ~filters.COMMAND, handlers.add_user)\r\n                ]\r\n            },\r\n            fallbacks=[CommandHandler(\"cancel\", handlers.cancel)],\r\n            per_chat=True,\r\n            per_message=False,  # Set per_message to False\r\n            name=\"admin_conversation\"\r\n        )\r\n\r\n        # Add handlers for commands\r\n        application.add_handler(admin_conv_handler)\r\n        application.add_handler(CommandHandler(\"help\", handlers.help_command))\r\n        application.add_handler(CommandHandler(\"top\", handlers.show_top))\r\n        application.add_handler(CommandHandler(\"ac\", handlers.clear_all_points))\r\n        application.add_handler(CommandHandler(\"cancel\", handlers.cancel))\r\n        application.add_handler(CommandHandler(\"adduser\", handlers.add_user_command))\r\n\r\n        # Add message handler to track users (outside of conversation)\r\n        application.add_handler(MessageHandler(\r\n            filters.TEXT & ~filters.COMMAND,\r\n            handlers.handle_user_message\r\n        ))\r\n\r\n        # Add handler to fetch and store users when bot is added to a chat\r\n        application.add_handler(MessageHandler(\r\n            filters.StatusUpdate.NEW_CHAT_MEMBERS,\r\n            handlers.fetch_and_store_users\r\n        ))\r\n\r\n        # Add handler to delete chat data when bot is removed from a chat\r\n        application.add_handler(MessageHandler(\r\n            filters.StatusUpdate.LEFT_CHAT_MEMBER,\r\n            handlers.handle_bot_removed\r\n        ))\r\n\r\n        # Start the bot\r\n        logger.info(\"Bot started successfully\")\r\n        application.run_polling(drop_pending_updates=True)\r\n\r\n    except Exception as e:\r\n        logger.error(f\"Critical error: {repr(e)}\")\r\n        sys.exit(1)\r\n\r\nif __name__ == '__main__':\r\n    main()\r\n"
        }
    ]
}