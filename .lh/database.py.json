{
    "sourceFile": "database.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1740778312689,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1740778312689,
            "name": "Commit-0",
            "content": "import os\r\nfrom sqlalchemy import create_engine, Column, Integer, String, BigInteger, text\r\nfrom sqlalchemy.ext.declarative import declarative_base\r\nfrom sqlalchemy.orm import sessionmaker\r\nfrom contextlib import contextmanager\r\nimport logging\r\nfrom sqlalchemy.exc import OperationalError\r\nfrom time import sleep\r\n\r\n# Configure logging with less verbose output\r\nlogging.basicConfig(\r\n    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',\r\n    level=logging.WARNING\r\n)\r\nlogger = logging.getLogger(__name__)\r\n\r\n# Get database URL from environment\r\nDATABASE_URL = os.environ.get(\"DATABASE_URL\")\r\nif DATABASE_URL is None:\r\n    raise Exception(\"DATABASE_URL environment variable is not set\")\r\n\r\ndef create_db_engine(retries=3, delay=1):\r\n    \"\"\"Create database engine with optimized connection pool\"\"\"\r\n    for attempt in range(retries):\r\n        try:\r\n            engine = create_engine(\r\n                DATABASE_URL,\r\n                pool_size=10,\r\n                max_overflow=20,\r\n                pool_timeout=30,\r\n                pool_recycle=1800,\r\n                pool_pre_ping=True,\r\n                connect_args={\r\n                    'connect_timeout': 10,\r\n                    'application_name': 'TelegramPointsBot',\r\n                    'sslmode': 'require'\r\n                }\r\n            )\r\n\r\n            # Test the connection\r\n            with engine.connect() as connection:\r\n                connection.execute(text(\"SELECT 1\"))\r\n            return engine\r\n\r\n        except OperationalError as e:\r\n            if attempt == retries - 1:\r\n                logger.error(f\"Failed to connect to database after {retries} attempts\")\r\n                raise\r\n            sleep(delay)\r\n            delay *= 2\r\n\r\nengine = create_db_engine()\r\nSessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)\r\nBase = declarative_base()\r\n\r\nclass UserPoints(Base):\r\n    __tablename__ = \"user_points\"\r\n\r\n    id = Column(Integer, primary_key=True, index=True)\r\n    chat_id = Column(BigInteger, index=True)\r\n    user_id = Column(BigInteger, index=True, nullable=True)\r\n    username = Column(String, nullable=True)\r\n    manual_name = Column(String, nullable=True)\r\n    points = Column(Integer, default=0)\r\n\r\nclass Admins(Base):\r\n    __tablename__ = \"admins\"\r\n\r\n    id = Column(Integer, primary_key=True, index=True)\r\n    chat_id = Column(BigInteger, index=True)\r\n    user_id = Column(BigInteger, index=True)\r\n\r\n# Create tables only if they don't exist\r\nBase.metadata.create_all(bind=engine, checkfirst=True)\r\n\r\n@contextmanager\r\ndef get_db():\r\n    \"\"\"Provide a transactional scope around a series of operations.\"\"\"\r\n    db = SessionLocal()\r\n    try:\r\n        yield db\r\n        db.commit()\r\n    except Exception as e:\r\n        logger.error(f\"Database transaction failed: {e}\")\r\n        db.rollback()\r\n        raise\r\n    finally:\r\n        db.close()\r\n\r\nclass Database:\r\n    def __init__(self):\r\n        \"\"\"Initialize database connection\"\"\"\r\n        Base.metadata.create_all(bind=engine, checkfirst=True)\r\n\r\n    def clear_all_points(self, chat_id: int):\r\n        \"\"\"Clear all points from the specific chat\"\"\"\r\n        with get_db() as db:\r\n            db.query(UserPoints).filter(UserPoints.chat_id == chat_id).update({\"points\": 0})\r\n\r\n    def get_user_id_by_username(self, chat_id: int, username: str) -> int:\r\n        \"\"\"Get user_id by username for specific chat\"\"\"\r\n        with get_db() as db:\r\n            user = db.query(UserPoints.user_id).filter(\r\n                UserPoints.chat_id == chat_id,\r\n                UserPoints.username == username\r\n            ).first()\r\n            return user.user_id if user else None\r\n\r\n    def get_all_users(self, chat_id: int) -> list:\r\n        \"\"\"Get list of all usernames in specific chat\"\"\"\r\n        with get_db() as db:\r\n            users = db.query(UserPoints.username, UserPoints.manual_name).filter(\r\n                UserPoints.chat_id == chat_id\r\n            ).all()\r\n            return [user.username or user.manual_name for user in users]\r\n\r\n    def add_points(self, chat_id: int, user_id: int, points: int, username: str = None, manual_name: str = None) -> bool:\r\n        \"\"\"Add points to a user in specific chat\"\"\"\r\n        try:\r\n            with get_db() as db:\r\n                user = db.query(UserPoints).filter(\r\n                    UserPoints.chat_id == chat_id,\r\n                    (UserPoints.user_id == user_id) | (UserPoints.manual_name == manual_name)\r\n                ).first()\r\n\r\n                if not user:\r\n                    user = UserPoints(\r\n                        chat_id=chat_id,\r\n                        user_id=user_id,\r\n                        points=points,\r\n                        username=username,\r\n                        manual_name=manual_name\r\n                    )\r\n                    db.add(user)\r\n                else:\r\n                    if username and user.username != username:\r\n                        user.username = username\r\n                    if manual_name and user.manual_name != manual_name:\r\n                        user.manual_name = manual_name\r\n                    user.points += points\r\n\r\n                return True\r\n        except Exception as e:\r\n            logger.error(f\"Error in add_points: {e}\")\r\n            return False\r\n\r\n    def subtract_points(self, chat_id: int, user_id: int, points: int, username: str = None, manual_name: str = None) -> bool:\r\n        \"\"\"Subtract points from a user in specific chat\"\"\"\r\n        try:\r\n            with get_db() as db:\r\n                user = db.query(UserPoints).filter(\r\n                    UserPoints.chat_id == chat_id,\r\n                    (UserPoints.user_id == user_id) | (UserPoints.manual_name == manual_name)\r\n                ).first()\r\n\r\n                if not user:\r\n                    user = UserPoints(\r\n                        chat_id=chat_id,\r\n                        user_id=user_id,\r\n                        points=0,\r\n                        username=username,\r\n                        manual_name=manual_name\r\n                    )\r\n                    db.add(user)\r\n\r\n                if username and user.username != username:\r\n                    user.username = username\r\n                if manual_name and user.manual_name != manual_name:\r\n                    user.manual_name = manual_name\r\n                user.points -= points\r\n\r\n                return True\r\n        except Exception as e:\r\n            logger.error(f\"Error in subtract_points: {e}\")\r\n            return False\r\n\r\n    def get_user_points(self, chat_id: int, user_id: int = None, manual_name: str = None) -> int:\r\n        \"\"\"Get points for a specific user in specific chat\"\"\"\r\n        try:\r\n            with get_db() as db:\r\n                points = db.query(UserPoints.points).filter(\r\n                    UserPoints.chat_id == chat_id,\r\n                    (UserPoints.user_id == user_id) | (UserPoints.manual_name == manual_name)\r\n                ).scalar()\r\n                return points or 0\r\n        except Exception as e:\r\n            logger.error(f\"Error in get_user_points: {e}\")\r\n            return 0\r\n\r\n    def get_top_users(self, chat_id: int, limit: int = 10) -> list:\r\n        \"\"\"Get top users by points in specific chat\"\"\"\r\n        try:\r\n            with get_db() as db:\r\n                users = db.query(\r\n                    UserPoints.user_id,\r\n                    UserPoints.points,\r\n                    UserPoints.username,\r\n                    UserPoints.manual_name\r\n                ).filter(\r\n                    UserPoints.chat_id == chat_id\r\n                ).order_by(\r\n                    UserPoints.points.desc()\r\n                ).limit(limit).all()\r\n\r\n                return [(user.user_id, {\r\n                    \"points\": user.points,\r\n                    \"username\": user.username,\r\n                    \"manual_name\": user.manual_name\r\n                }) for user in users]\r\n        except Exception as e:\r\n            logger.error(f\"Error in get_top_users: {e}\")\r\n            return []\r\n\r\n    def add_admin(self, chat_id: int, user_id: int):\r\n        \"\"\"Add an admin to the database\"\"\"\r\n        with get_db() as db:\r\n            admin = db.query(Admins).filter(\r\n                Admins.chat_id == chat_id,\r\n                Admins.user_id == user_id\r\n            ).first()\r\n\r\n            if not admin:\r\n                admin = Admins(chat_id=chat_id, user_id=user_id)\r\n                db.add(admin)\r\n\r\n    def is_admin(self, chat_id: int, user_id: int) -> bool:\r\n        \"\"\"Check if a user is an admin in a specific chat\"\"\"\r\n        with get_db() as db:\r\n            admin = db.query(Admins).filter(\r\n                Admins.chat_id == chat_id,\r\n                Admins.user_id == user_id\r\n            ).first()\r\n            return admin is not None\r\n\r\n    def delete_chat_data(self, chat_id: int):\r\n        \"\"\"Delete all data related to a specific chat\"\"\"\r\n        with get_db() as db:\r\n            db.query(UserPoints).filter(UserPoints.chat_id == chat_id).delete()\r\n            db.query(Admins).filter(Admins.chat_id == chat_id).delete()\r\n\r\n    def get_user_rank(self, chat_id: int, user_id: int = None, manual_name: str = None) -> int:\r\n        \"\"\"Get the rank of a user in a specific chat\"\"\"\r\n        with get_db() as db:\r\n            users = db.query(UserPoints).filter(UserPoints.chat_id == chat_id).order_by(UserPoints.points.desc()).all()\r\n            for rank, user in enumerate(users, 1):\r\n                if user.user_id == user_id or user.manual_name == manual_name:\r\n                    return rank\r\n            return -1"
        }
    ]
}