{
    "sourceFile": "handlers.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 3,
            "patches": [
                {
                    "date": 1740776980511,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1740779889111,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,9 +18,9 @@\n )\r\n logger = logging.getLogger(__name__)\r\n \r\n # Define states\r\n-CHOOSING_ACTION, CHOOSING_USER, CHOOSING_POINTS, ADDING_USER = range(4)\r\n+CHOOSING_ACTION, CHOOSING_USER, CHOOSING_POINTS = range(3)\r\n \r\n # Initialize database\r\n db = Database()\r\n \r\n@@ -95,10 +95,9 @@\n             [\r\n                 InlineKeyboardButton(\"Додати бали\", callback_data='add'),\r\n                 InlineKeyboardButton(\"Забрати бали\", callback_data='subtract')\r\n             ],\r\n-            [InlineKeyboardButton(\"Видалити системні повідомлення\", callback_data='delete_system_messages')],\r\n-            [InlineKeyboardButton(\"Додати користувача\", callback_data='add_user')]\r\n+            [InlineKeyboardButton(\"Видалити системні повідомлення\", callback_data='delete_system_messages')]\r\n         ]\r\n         reply_markup = InlineKeyboardMarkup(keyboard)\r\n \r\n         menu_message = await update.message.reply_text(\r\n@@ -134,12 +133,8 @@\n \r\n         if action == 'delete_system_messages':\r\n             return await delete_system_messages(update, context)\r\n \r\n-        if action == 'add_user':\r\n-            await query.message.edit_text(\"Введіть ім'я користувача та кількість балів у форматі: ім'я кількість_балів\")\r\n-            return ADDING_USER\r\n-\r\n         # Handle finish action\r\n         if action == 'finish':\r\n             # Delete the original command message and all bot responses\r\n             if 'messages_to_delete' in context.user_data:\r\n@@ -288,54 +283,8 @@\n     except Exception as e:\r\n         logger.error(f\"Error in points_callback: {repr(e)}\")\r\n         return ConversationHandler.END\r\n \r\n-async def add_user(update: Update, context: ContextTypes.DEFAULT_TYPE):\r\n-    \"\"\"Handle adding a user manually\"\"\"\r\n-    try:\r\n-        user = update.effective_user\r\n-        chat = update.effective_chat\r\n-        if not user or not chat:\r\n-            return ConversationHandler.END\r\n-\r\n-        if not is_admin(user.id, chat.id):\r\n-            await update.message.reply_text(config.NOT_ADMIN_MESSAGE)\r\n-            return ConversationHandler.END\r\n-\r\n-        text = update.message.text.split()\r\n-        if len(text) != 3:\r\n-            await update.message.reply_text(config.INVALID_FORMAT_MESSAGE)\r\n-            return ConversationHandler.END\r\n-\r\n-        username, points = text[1], int(text[2])\r\n-        chat_id = update.effective_chat.id\r\n-        user_id = -abs(hash(username))  # Create a temporary user ID\r\n-\r\n-        db.add_points(chat_id, user_id, points, username)\r\n-        await update.message.reply_text(f\"Користувача {username} додано з {points} балами.\")\r\n-        return ConversationHandler.END\r\n-    except Exception as e:\r\n-        logger.error(f\"Error in add_user: {repr(e)}\")\r\n-        return ConversationHandler.END\r\n-\r\n-async def add_user_command(update: Update, context: ContextTypes.DEFAULT_TYPE):\r\n-    \"\"\"Handle the /adduser command\"\"\"\r\n-    try:\r\n-        user = update.effective_user\r\n-        chat = update.effective_chat\r\n-        if not user or not chat:\r\n-            return ConversationHandler.END\r\n-\r\n-        if not is_admin(user.id, chat.id):\r\n-            await update.message.reply_text(config.NOT_ADMIN_MESSAGE)\r\n-            return ConversationHandler.END\r\n-\r\n-        await update.message.reply_text(\"Введіть ім'я користувача та кількість балів у форматі: ім'я кількість_балів\")\r\n-        return ADDING_USER\r\n-    except Exception as e:\r\n-        logger.error(f\"Error in add_user_command: {repr(e)}\")\r\n-        return ConversationHandler.END\r\n-\r\n async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):\r\n     \"\"\"Cancel the conversation\"\"\"\r\n     try:\r\n         context.user_data.clear()\r\n"
                },
                {
                    "date": 1740780313728,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -356,5 +356,6 @@\n         await update.message.reply_text(message)\r\n         return ConversationHandler.END\r\n     except Exception as e:\r\n         logger.error(f\"Error in show_top: {repr(e)}\")\r\n-        return ConversationHandler.END\n\\ No newline at end of file\n+        return ConversationHandler.END\r\n+    #asdasdasd\n\\ No newline at end of file\n"
                },
                {
                    "date": 1740780893401,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -356,6 +356,5 @@\n         await update.message.reply_text(message)\r\n         return ConversationHandler.END\r\n     except Exception as e:\r\n         logger.error(f\"Error in show_top: {repr(e)}\")\r\n-        return ConversationHandler.END\r\n-    #asdasdasd\n\\ No newline at end of file\n+        return ConversationHandler.END\n\\ No newline at end of file\n"
                }
            ],
            "date": 1740776980511,
            "name": "Commit-0",
            "content": "import logging\r\nfrom telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton\r\nfrom telegram.ext import (\r\n    ContextTypes,\r\n    ConversationHandler,\r\n    CallbackQueryHandler,\r\n    MessageHandler,\r\n    filters,\r\n    CommandHandler\r\n)\r\nimport config\r\nfrom database import Database\r\n\r\n# Configure logging\r\nlogging.basicConfig(\r\n    format='%(asctime)s - %(name)s - %(levellevel)s - %(message)s',\r\n    level=logging.INFO\r\n)\r\nlogger = logging.getLogger(__name__)\r\n\r\n# Define states\r\nCHOOSING_ACTION, CHOOSING_USER, CHOOSING_POINTS, ADDING_USER = range(4)\r\n\r\n# Initialize database\r\ndb = Database()\r\n\r\nasync def fetch_and_store_users(update: Update, context: ContextTypes.DEFAULT_TYPE):\r\n    \"\"\"Fetch and store all admins when the bot is added to a chat\"\"\"\r\n    try:\r\n        chat = update.effective_chat\r\n        if not chat:\r\n            return\r\n\r\n        # Fetch all administrators\r\n        members = await context.bot.get_chat_administrators(chat.id)\r\n        for member in members:\r\n            user = member.user\r\n            db.add_points(chat.id, user.id, 1, user.username)  # Give 1 point to each user\r\n            if member.status in ['administrator', 'creator']:\r\n                db.add_admin(chat.id, user.id)\r\n\r\n        logger.info(f\"Fetched and stored all admins for chat {chat.id}\")\r\n    except Exception as e:\r\n        logger.error(f\"Error fetching and storing users: {repr(e)}\")\r\n\r\nasync def handle_bot_removed(update: Update, context: ContextTypes.DEFAULT_TYPE):\r\n    \"\"\"Handle bot removal from chat\"\"\"\r\n    try:\r\n        chat = update.effective_chat\r\n        if not chat:\r\n            return\r\n\r\n        db.delete_chat_data(chat.id)\r\n        logger.info(f\"Deleted all data for chat {chat.id}\")\r\n    except Exception as e:\r\n        logger.error(f\"Error handling bot removal: {repr(e)}\")\r\n\r\ndef is_admin(user_id: int, chat_id: int) -> bool:\r\n    \"\"\"Check if user is admin\"\"\"\r\n    return db.is_admin(chat_id, user_id)\r\n\r\nasync def handle_user_message(update: Update, context: ContextTypes.DEFAULT_TYPE):\r\n    \"\"\"Handle regular messages to track users\"\"\"\r\n    try:\r\n        user = update.effective_user\r\n        chat = update.effective_chat\r\n\r\n        if user and chat and user.username:\r\n            # Add user to database with 1 point if they don't exist\r\n            success = db.add_points(chat.id, user.id, 1, user.username)\r\n            if success:\r\n                logger.info(f\"Successfully tracked user {user.username} with ID {user.id} in chat {chat.id}\")\r\n            else:\r\n                logger.error(f\"Failed to track user {user.username} in chat {chat.id}\")\r\n    except Exception as e:\r\n        logger.error(f\"Error handling user message: {repr(e)}\")\r\n\r\nasync def admin_command(update: Update, context: ContextTypes.DEFAULT_TYPE):\r\n    \"\"\"Handle the /a command\"\"\"\r\n    try:\r\n        logger.info(\"Admin command invoked\")\r\n        user = update.effective_user\r\n        chat = update.effective_chat\r\n        if not user or not chat:\r\n            return ConversationHandler.END\r\n\r\n        if not is_admin(user.id, chat.id):\r\n            await update.message.reply_text(config.NOT_ADMIN_MESSAGE)\r\n            return ConversationHandler.END\r\n\r\n        # Store the command message ID for later deletion\r\n        context.user_data['messages_to_delete'] = [update.message.message_id]\r\n\r\n        keyboard = [\r\n            [\r\n                InlineKeyboardButton(\"Додати бали\", callback_data='add'),\r\n                InlineKeyboardButton(\"Забрати бали\", callback_data='subtract')\r\n            ],\r\n            [InlineKeyboardButton(\"Видалити системні повідомлення\", callback_data='delete_system_messages')],\r\n            [InlineKeyboardButton(\"Додати користувача\", callback_data='add_user')]\r\n        ]\r\n        reply_markup = InlineKeyboardMarkup(keyboard)\r\n\r\n        menu_message = await update.message.reply_text(\r\n            text=\"Оберіть дію:\",\r\n            reply_markup=reply_markup\r\n        )\r\n        # Store menu message ID\r\n        context.user_data['messages_to_delete'].append(menu_message.message_id)\r\n        return CHOOSING_ACTION\r\n    except Exception as e:\r\n        logger.error(f\"Error in admin_command: {repr(e)}\")\r\n        return ConversationHandler.END\r\n\r\nasync def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):\r\n    \"\"\"Handle the /help command\"\"\"\r\n    try:\r\n        await update.message.reply_text(config.HELP_MESSAGE)\r\n    except Exception as e:\r\n        logger.error(f\"Error in help_command: {repr(e)}\")\r\n\r\nasync def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):\r\n    \"\"\"Handle button callbacks\"\"\"\r\n    try:\r\n        query = update.callback_query\r\n        chat_id = query.message.chat_id\r\n        await query.answer()\r\n\r\n        if not is_admin(update.effective_user.id, chat_id):\r\n            await query.message.edit_text(config.NOT_ADMIN_MESSAGE)\r\n            return ConversationHandler.END\r\n\r\n        action = query.data\r\n\r\n        if action == 'delete_system_messages':\r\n            return await delete_system_messages(update, context)\r\n\r\n        if action == 'add_user':\r\n            await query.message.edit_text(\"Введіть ім'я користувача та кількість балів у форматі: ім'я кількість_балів\")\r\n            return ADDING_USER\r\n\r\n        # Handle finish action\r\n        if action == 'finish':\r\n            # Delete the original command message and all bot responses\r\n            if 'messages_to_delete' in context.user_data:\r\n                for message_id in context.user_data['messages_to_delete']:\r\n                    try:\r\n                        await context.bot.delete_message(chat_id=chat_id, message_id=message_id)\r\n                    except Exception as e:\r\n                        logger.error(f\"Error deleting message {message_id}: {repr(e)}\")\r\n                        continue\r\n\r\n            # Delete the current menu message\r\n            try:\r\n                await query.message.delete()\r\n            except Exception as e:\r\n                logger.error(f\"Error deleting menu message: {repr(e)}\")\r\n\r\n            context.user_data.clear()\r\n            return ConversationHandler.END\r\n\r\n        context.user_data['action'] = action\r\n        context.user_data['chat_id'] = chat_id\r\n\r\n        users = db.get_all_users(chat_id)\r\n        keyboard = []\r\n        for username in users:\r\n            keyboard.append([InlineKeyboardButton(f\"@{username}\", callback_data=f\"user_{username}\")])\r\n\r\n        keyboard.append([InlineKeyboardButton(\"Завершити\", callback_data='finish')])\r\n        keyboard.append([InlineKeyboardButton(\"Видалити системні повідомлення\", callback_data='delete_system_messages')])\r\n\r\n        if not keyboard:\r\n            message = await query.message.edit_text(\"Наразі немає користувачів у цьому чаті.\")\r\n            if 'messages_to_delete' not in context.user_data:\r\n                context.user_data['messages_to_delete'] = []\r\n            context.user_data['messages_to_delete'].append(message.message_id)\r\n            return ConversationHandler.END\r\n\r\n        reply_markup = InlineKeyboardMarkup(keyboard)\r\n        text = \"додати\" if action == \"add\" else \"забрати\"\r\n\r\n        # Store the current message for deletion\r\n        try:\r\n            menu_message = await query.message.edit_text(\r\n                f\"Оберіть користувача, якому хочете {text} бали:\",\r\n                reply_markup=reply_markup\r\n            )\r\n            if 'messages_to_delete' not in context.user_data:\r\n                context.user_data['messages_to_delete'] = []\r\n            context.user_data['messages_to_delete'].append(menu_message.message_id)\r\n        except Exception as e:\r\n            logger.error(f\"Error updating menu message: {repr(e)}\")\r\n\r\n        return CHOOSING_USER\r\n\r\n    except Exception as e:\r\n        logger.error(f\"Error in button_callback: {repr(e)}\")\r\n        return ConversationHandler.END\r\n\r\nasync def user_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):\r\n    \"\"\"Handle user selection\"\"\"\r\n    try:\r\n        query = update.callback_query\r\n        await query.answer()\r\n\r\n        username = query.data.replace(\"user_\", \"\")\r\n        context.user_data['username'] = username\r\n\r\n        action = context.user_data.get('action')\r\n        if not action:\r\n            logger.error(\"No action found in context\")\r\n            return ConversationHandler.END\r\n\r\n        chat_id = context.user_data.get('chat_id')\r\n        user_id = db.get_user_id_by_username(chat_id, username)\r\n        user_points = db.get_user_points(chat_id, user_id)\r\n        user_rank = db.get_user_rank(chat_id, user_id)\r\n\r\n        text = \"додати\" if action == \"add\" else \"забрати\"\r\n        await query.message.edit_text(\r\n            f\"Введіть кількість балів, які хочете {text} для користувача @{username}:\\n\\n\"\r\n            f\"@{username}\\n\"\r\n            f\"🏅Балів: {user_points}\\n\"\r\n            f\"📍Місце в рейтингу: {user_rank}\",\r\n            reply_markup=InlineKeyboardMarkup([\r\n                [InlineKeyboardButton(str(i), callback_data=f\"points_{i}\") for i in range(1, 11)],\r\n                [InlineKeyboardButton(\"Видалити системні повідомлення\", callback_data='delete_system_messages')]\r\n            ])\r\n        )\r\n        return CHOOSING_POINTS\r\n    except Exception as e:\r\n        logger.error(f\"Error in user_callback: {repr(e)}\")\r\n        return ConversationHandler.END\r\n\r\nasync def points_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):\r\n    \"\"\"Handle points selection\"\"\"\r\n    try:\r\n        query = update.callback_query\r\n        await query.answer()\r\n\r\n        points = int(query.data.replace(\"points_\", \"\"))\r\n        chat_id = context.user_data.get('chat_id')\r\n        username = context.user_data.get('username')\r\n        action = context.user_data.get('action')\r\n\r\n        if not username or not action or not chat_id:\r\n            logger.error(\"Missing username, action or chat_id in context\")\r\n            return ConversationHandler.END\r\n\r\n        user_id = db.get_user_id_by_username(chat_id, username)\r\n        if user_id is None:\r\n            user_id = -abs(hash(username))\r\n            logger.info(f\"Creating temporary user ID {user_id} for username {username}\")\r\n\r\n        if action == 'add':\r\n            db.add_points(chat_id, user_id, points, username)\r\n            message = f\"{config.POINTS_UPDATED_MESSAGE} Користувач: @{username}, Бали: +{points}\"\r\n        else:\r\n            db.subtract_points(chat_id, user_id, points, username)\r\n            message = f\"{config.POINTS_UPDATED_MESSAGE} Користувач: @{username}, Бали: -{points}\"\r\n\r\n        logger.info(f\"Points updated for user {username}: {points} points\")\r\n\r\n        keyboard = [\r\n            [\r\n                InlineKeyboardButton(\"Додати бали\", callback_data='add'),\r\n                InlineKeyboardButton(\"Забрати бали\", callback_data='subtract')\r\n            ],\r\n            [InlineKeyboardButton(\"Завершити\", callback_data='finish')],\r\n            [InlineKeyboardButton(\"Видалити системні повідомлення\", callback_data='delete_system_messages')]\r\n        ]\r\n        reply_markup = InlineKeyboardMarkup(keyboard)\r\n\r\n        # Store all bot responses for deletion\r\n        result_message = await query.message.reply_text(message)\r\n        menu_message = await query.message.reply_text(\r\n            text=\"Оберіть наступну дію:\",\r\n            reply_markup=reply_markup\r\n        )\r\n\r\n        context.user_data['messages_to_delete'].extend([\r\n            result_message.message_id,\r\n            menu_message.message_id\r\n        ])\r\n\r\n        return CHOOSING_ACTION\r\n    except Exception as e:\r\n        logger.error(f\"Error in points_callback: {repr(e)}\")\r\n        return ConversationHandler.END\r\n\r\nasync def add_user(update: Update, context: ContextTypes.DEFAULT_TYPE):\r\n    \"\"\"Handle adding a user manually\"\"\"\r\n    try:\r\n        user = update.effective_user\r\n        chat = update.effective_chat\r\n        if not user or not chat:\r\n            return ConversationHandler.END\r\n\r\n        if not is_admin(user.id, chat.id):\r\n            await update.message.reply_text(config.NOT_ADMIN_MESSAGE)\r\n            return ConversationHandler.END\r\n\r\n        text = update.message.text.split()\r\n        if len(text) != 3:\r\n            await update.message.reply_text(config.INVALID_FORMAT_MESSAGE)\r\n            return ConversationHandler.END\r\n\r\n        username, points = text[1], int(text[2])\r\n        chat_id = update.effective_chat.id\r\n        user_id = -abs(hash(username))  # Create a temporary user ID\r\n\r\n        db.add_points(chat_id, user_id, points, username)\r\n        await update.message.reply_text(f\"Користувача {username} додано з {points} балами.\")\r\n        return ConversationHandler.END\r\n    except Exception as e:\r\n        logger.error(f\"Error in add_user: {repr(e)}\")\r\n        return ConversationHandler.END\r\n\r\nasync def add_user_command(update: Update, context: ContextTypes.DEFAULT_TYPE):\r\n    \"\"\"Handle the /adduser command\"\"\"\r\n    try:\r\n        user = update.effective_user\r\n        chat = update.effective_chat\r\n        if not user or not chat:\r\n            return ConversationHandler.END\r\n\r\n        if not is_admin(user.id, chat.id):\r\n            await update.message.reply_text(config.NOT_ADMIN_MESSAGE)\r\n            return ConversationHandler.END\r\n\r\n        await update.message.reply_text(\"Введіть ім'я користувача та кількість балів у форматі: ім'я кількість_балів\")\r\n        return ADDING_USER\r\n    except Exception as e:\r\n        logger.error(f\"Error in add_user_command: {repr(e)}\")\r\n        return ConversationHandler.END\r\n\r\nasync def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):\r\n    \"\"\"Cancel the conversation\"\"\"\r\n    try:\r\n        context.user_data.clear()\r\n        await update.message.reply_text(\"Операцію скасовано.\")\r\n        return ConversationHandler.END\r\n    except Exception as e:\r\n        logger.error(f\"Error in cancel: {repr(e)}\")\r\n        return ConversationHandler.END\r\n\r\nasync def delete_system_messages(update: Update, context: ContextTypes.DEFAULT_TYPE):\r\n    \"\"\"Delete system messages\"\"\"\r\n    try:\r\n        query = update.callback_query\r\n        chat_id = query.message.chat_id\r\n        await query.answer()\r\n\r\n        if 'messages_to_delete' in context.user_data:\r\n            for message_id in context.user_data['messages_to_delete']:\r\n                try:\r\n                    await context.bot.delete_message(chat_id=chat_id, message_id=message_id)\r\n                except Exception as e:\r\n                    logger.error(f\"Error deleting message {message_id}: {repr(e)}\")\r\n                    continue\r\n\r\n        context.user_data.clear()\r\n        try:\r\n            await query.message.edit_text(\"Системні повідомлення видалено.\")\r\n        except Exception as e:\r\n            logger.error(f\"Error in delete_system_messages: {repr(e)}\")\r\n        return ConversationHandler.END\r\n    except Exception as e:\r\n        logger.error(f\"Error in delete_system_messages: {repr(e)}\")\r\n        return ConversationHandler.END\r\n\r\nasync def clear_all_points(update: Update, context: ContextTypes.DEFAULT_TYPE):\r\n    \"\"\"Handle the /allclear command\"\"\"\r\n    try:\r\n        user = update.effective_user\r\n        chat = update.effective_chat\r\n        if not user or not chat:\r\n            return ConversationHandler.END\r\n\r\n        if not is_admin(user.id, chat.id):\r\n            await update.message.reply_text(config.NOT_ADMIN_MESSAGE)\r\n            return ConversationHandler.END\r\n\r\n        chat_id = update.effective_chat.id\r\n        db.clear_all_points(chat_id)\r\n        await update.message.reply_text(\"Всі бали були успішно очищені!\")\r\n    except Exception as e:\r\n        logger.error(f\"Error in clear_all_points: {repr(e)}\")\r\n\r\nasync def show_top(update: Update, context: ContextTypes.DEFAULT_TYPE):\r\n    \"\"\"Handle the /top command\"\"\"\r\n    try:\r\n        chat_id = update.effective_chat.id\r\n        top_users = db.get_top_users(chat_id, 10)\r\n\r\n        if not top_users:\r\n            await update.message.reply_text(\"В базі даних ще немає користувачів!\")\r\n            return ConversationHandler.END\r\n\r\n        message = \"⚠️👀 Люди, Що Бачили Все! 👀⚠️\\n\\n\"\r\n        for i, (user_id, user_data) in enumerate(top_users, 1):\r\n            username = user_data[\"username\"] or f\"User {user_id}\"\r\n            emoji = \"👑\" if i == 1 else \"🏆\" if i == 2 else \"🐉\" if i == 3 else \"🚀\"\r\n            message += f\"{i}. {emoji} @{username}: {user_data['points']} балів\\n\"\r\n\r\n        await update.message.reply_text(message)\r\n        return ConversationHandler.END\r\n    except Exception as e:\r\n        logger.error(f\"Error in show_top: {repr(e)}\")\r\n        return ConversationHandler.END"
        }
    ]
}